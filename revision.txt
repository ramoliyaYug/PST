1. higher order function  
-filter:take array and return the new array which meets the given condition
array.filter(callback(element) => condition);

-map: take array and return the new array and apply the transformation to the each element
array.map(callback(element) => transformation);

-some:returns the true or false based on the condition if at least one element in the array passes the condition
array.some(callback(element) => condition);

-every:returns the true or false based on the condition if all the elements in the array passes the condition
array.every(callback(element) => condition);

-reduce:its like a loop in array, it reduces the value to a single value
array.reduce((accumulator, element) => operation, initialValue);


2.String methods:
-concat:string1.concat(string2, ...);

-charAt:string.charAt(index);

-toLowerCase:string.toLowerCase();

-toUpperCase:string.toUpperCase();

-trim:string.trim();

-slice:string.slice(startIndex, endIndex);

-substring:string.substring(startIndex, endIndex);

-indexOf:string.indexOf(substring);

-includes:string.includes(substring);

-replace:string.replace(substring, newSubstring);

-replaceAll:string.replaceAll(substring, newSubstring);


3.object methods:
-Object.keys:
-Object.values:
-Object.entries:

4.cloning:
-Object.assign:Object.assign({}, sourceObject);

-spread method:const newObject = { ...sourceObject };

-JSON.parse and JSON.stringify:const deepClone = JSON.parse(JSON.stringify(sourceObject));


5.object function:
-factory function:
-constructor function:

6.array methods:
-sort:array.sort((a, b) => a - b); // ascending

-reverse:array.reverse();

-push:array.push(element1, element2, ...);

-pop:array.pop();

-shift:array.shift();

-unshift:array.unshift(element1, element2, ...);

